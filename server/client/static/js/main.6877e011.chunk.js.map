{"version":3,"sources":["reportWebVitals.js","app/utils/validator.js","app/components/common/form/textField.jsx","app/components/common/form/selectField.jsx","app/components/common/form/radio.Field.jsx","app/components/common/form/multiSelectField.jsx","app/components/common/backButton.jsx","app/services/localStorage.service.js","app/services/auth.service.js","app/services/http.service.js","app/services/qaulity.service.js","app/utils/isOutdated.js","app/store/qualities.js","app/services/profession.service.js","app/store/professions.js","app/services/user.service.js","app/utils/generateAuthError.js","app/utils/history.js","app/store/users.js","app/components/page/editUserPage/index.js","app/components/page/editUserPage/editUserPage.jsx","app/components/ui/userCard.jsx","app/components/ui/qualities/quality.jsx","app/components/ui/qualities/index.js","app/components/ui/qualities/qualitiesList.jsx","app/components/ui/qualitiesCard.jsx","app/components/ui/meetingsCard.jsx","app/utils/displayDate.js","app/components/common/comments/comment.jsx","app/components/common/comments/commentsList.jsx","app/components/common/form/textAreaField.jsx","app/components/common/comments/addCommentForm.jsx","app/components/common/comments/index.js","app/services/comment.service.js","app/store/comments.js","app/components/ui/comments.jsx","app/components/page/userPage/index.js","app/components/page/userPage/userPage.jsx","app/components/common/pagination.jsx","app/components/common/groupList.jsx","app/components/ui/searchStatus.jsx","app/components/common/bookmark.jsx","app/components/common/table/tableBody.jsx","app/components/common/table/tableHeader.jsx","app/components/common/table/index.js","app/components/common/table/table.jsx","app/components/ui/profession.jsx","app/components/ui/usersTable.jsx","app/components/page/usersListPage/index.js","app/components/page/usersListPage/usersListPage.jsx","app/utils/paginate.js","app/components/ui/hoc/usersLoader.jsx","app/layouts/users.jsx","app/components/common/form/checkBoxField.jsx","app/components/ui/loginForm.jsx","app/components/ui/registerForm.jsx","app/layouts/login.jsx","app/utils/mockData.js","app/layouts/main.jsx","app/components/ui/navProfile.jsx","app/components/ui/navBar.jsx","app/components/common/protectedRoute.jsx","app/layouts/logOut.jsx","app/components/ui/hoc/appLoader.jsx","app/App.js","app/store/createStore.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","validator","data","config","errors","validate","validateMethod","statusValidate","trim","test","length","value","message","fieldName","error","TextField","label","type","name","onChange","useState","showPassword","setShowPassword","className","htmlFor","id","target","onClick","prevState","defaultProps","SelectField","defaultOption","options","optionsArray","Array","isArray","Object","keys","map","optionName","_id","disabled","option","RadioField","handleChange","checked","MultiSelectField","defaultValue","isMulti","closeMenuOnSelect","classNamePrefix","BackHistoryButton","history","useHistory","goBack","TOKEN_KEY","REFRESH_KEY","EXPIRES_KEY","USERID_KEY","localStorageService","setTokens","refreshToken","accessToken","userId","expiresIn","expiresDate","Date","getTime","localStorage","setItem","getAccessToken","getItem","getRefreshToken","getTokenExpiresDate","getUserId","removeAuthData","removeItem","httpAuth","axios","create","baseURL","congig","apiEndpoint","params","key","process","REACT_APP_FIREBASE_KEY","authService","register","payload","a","post","login","email","password","returnSecureToken","refresh","grant_type","refresh_token","http","configFile","interceptors","request","use","isExpired","now","isFireBase","containSlash","url","slice","idToken","id_token","expires_in","localId","user_id","auth","headers","Authorization","Promise","reject","response","res","content","status","console","log","toast","httpService","get","put","delete","patch","qualityService","fetchAll","isOutdated","date","qualitiesSlice","createSlice","initialState","entities","isLoading","lastFetch","reducers","qualitiesRequested","state","qualitiesReceved","action","qualitiesRequestFiled","qualitiesReducer","reducer","actions","loadQualitiesList","dispatch","getState","qualities","professionService","req","professionsSlice","professionsRequested","professionsReceved","professionsRequestFiled","professionsReducer","userEndpoint","userService","getCurrentUser","update","generetaAuthError","createBrowserHistory","isLoggedIn","dataLoaded","usersSlice","usersRequested","usersReceved","usersRequestFiled","authRequestSuccess","authRequestFailed","userCreated","push","userLoggedOut","userUpdateSuccessed","findIndex","u","authRequested","usersReducer","createAction","userUpdateFailed","userUpdateRequested","loadUsersList","getUserById","users","find","EditUserPage","setIsLoading","setData","currentUser","useSelector","useDispatch","qualitiesLoading","qualitiesList","q","professions","professionLoading","professionsList","p","setErrors","transformData","qualitiesIds","qualitiesArray","qualId","quality","getQualitiesListByIds","qual","useEffect","validatorConfog","isRequired","isEmail","isValid","onSubmit","e","preventDefault","profession","sex","UserCard","user","location","pathname","src","image","width","role","rate","Quality","color","Qualities","QualitiesCard","MeetingsCard","displayDate","dateNow","getFullYear","getDay","getHours","minutesDif","getMinutes","toLocaleString","month","getMonth","getDate","Comment","created","created_at","onRemove","currentUserId","alt","height","CommentsList","comments","comment","TextAreaField","AddCommentForm","commentEndpoint","commentService","createComment","getComments","pageId","orderBy","equalTo","removeComment","commentId","commentsSlice","commentsRequested","commentsReceved","commentsRequestFiled","commetnCreated","commentRemoved","filter","c","commentsReducer","addCommentRequested","removeCommentRequested","Comments","useParams","loadCommentsList","sortedComments","UserPage","completedMeetings","Pagination","itemsCount","pageSize","onPageChange","currentPage","pagesCount","Math","ceil","pages","_","range","page","GroupList","items","valueProperty","contentProperty","onItemSelect","selectedItem","item","SearchStatus","number","lastOne","Number","toString","indexOf","renderPhrase","BookMark","rest","TableBody","columns","renderContent","column","component","path","TableHeader","onSort","selectedSort","rendeSortArrow","currentPath","order","undefined","scope","Table","children","Profession","prof","getProfessionbyId","UserTable","onToggleBookMark","to","bookmark","UsersListPage","professionsLoading","setCurrentPage","searchQuery","setSearchQuery","selectedProf","setSelectedProf","sortBy","setSortBy","filteredUsers","toLowerCase","count","usersCrop","pageNumber","startIndex","take","paginate","placeholder","onDelete","newArray","pageIndex","UsersLoader","dataStatus","propTypes","PropTypes","oneOfType","arrayOf","node","Users","edit","CheckBoxField","LoginForm","stayOn","loginError","dispath","redirect","from","code","errorMessage","RegisterForm","licence","min","isCapitalSymbol","isContainDigit","newData","Login","formType","setFormType","toggleFormType","useMockData","statusConsts","setError","setStatus","progress","setProgress","setCount","summuryCount","incrementCount","newProgress","floor","updateProgress","initialize","Main","NavProfile","isOpen","setOpen","NavBar","aria-current","ProtectedRoute","Component","render","props","LogOut","AppLoader","usersStatusLoading","App","exact","require","combineReducers","configureStore","rootReducer","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6877e011.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import(\"web-vitals\").then(\r\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n                getCLS(onPerfEntry);\r\n                getFID(onPerfEntry);\r\n                getFCP(onPerfEntry);\r\n                getLCP(onPerfEntry);\r\n                getTTFB(onPerfEntry);\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export function validator(data, config) {\r\n    const errors = {};\r\n    function validate(validateMethod, data, config) {\r\n        let statusValidate;\r\n        switch (validateMethod) {\r\n            case \"isRequired\": {\r\n                if (typeof data === \"boolean\") {\r\n                    statusValidate = !data;\r\n                } else {\r\n                    statusValidate = data.trim() === \"\";\r\n                }\r\n                break;\r\n            }\r\n            case \"isEmail\": {\r\n                const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\r\n                statusValidate = !emailRegExp.test(data);\r\n                break;\r\n            }\r\n            case \"isCapitalSymbol\": {\r\n                const capitalRegExp = /[A-Z]+/g;\r\n                statusValidate = !capitalRegExp.test(data);\r\n                break;\r\n            }\r\n            case \"isContainDigit\": {\r\n                const digitRegExp = /\\d+/g;\r\n                statusValidate = !digitRegExp.test(data);\r\n                break;\r\n            }\r\n            case \"min\": {\r\n                statusValidate = data.length < config.value;\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n        if (statusValidate) return config.message;\r\n    }\r\n    for (const fieldName in data) {\r\n        for (const validateMethod in config[fieldName]) {\r\n            const error = validate(\r\n                validateMethod,\r\n                data[fieldName],\r\n                config[fieldName][validateMethod]\r\n            );\r\n            if (error && !errors[fieldName]) {\r\n                errors[fieldName] = error;\r\n            }\r\n        }\r\n    }\r\n    return errors;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TextField = ({ label, type, name, value, onChange, error }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const handleChange = ({ target }) => {\r\n        onChange({ name: target.name, value: target.value });\r\n    };\r\n    const getInputClasses = () => {\r\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\r\n    };\r\n    const toggleShowPassword = () => {\r\n        setShowPassword((prevState) => !prevState);\r\n    };\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <label htmlFor={name}> {label}</label>\r\n            <div className=\"input-group has-validation\">\r\n                <input\r\n                    type={showPassword ? \"text\" : type}\r\n                    id={name}\r\n                    name={name}\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    className={getInputClasses()}\r\n                />\r\n\r\n                {type === \"password\" && (\r\n                    <button\r\n                        className=\"btn btn-outline-secondary\"\r\n                        type=\"button\"\r\n                        onClick={toggleShowPassword}\r\n                    >\r\n                        <i\r\n                            className={\r\n                                \"bi bi-eye\" + (showPassword ? \"-slash\" : \"\")\r\n                            }\r\n                        ></i>\r\n                    </button>\r\n                )}\r\n                {error && <div className=\"invalid-feedback \">{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nTextField.defaultProps = {\r\n    type: \"text\"\r\n};\r\nTextField.propTypes = {\r\n    label: PropTypes.string,\r\n    type: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default TextField;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SelectField = ({\r\n    label,\r\n    value,\r\n    onChange,\r\n    defaultOption,\r\n    options,\r\n    error,\r\n    name\r\n}) => {\r\n    const handleChange = ({ target }) => {\r\n        onChange({ name: target.name, value: target.value });\r\n    };\r\n    const getInputClasses = () => {\r\n        return \"form-select\" + (error ? \" is-invalid\" : \"\");\r\n    };\r\n\r\n    const optionsArray =\r\n        !Array.isArray(options) && typeof options === \"object\"\r\n            ? Object.keys(options).map((optionName) => ({\r\n                  name: options[optionName].name,\r\n                  value: options[optionName]._id\r\n              }))\r\n            : options;\r\n\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <label htmlFor=\"validationCustom04\" className=\"form-label\">\r\n                {label}\r\n            </label>\r\n            <select\r\n                className={getInputClasses()}\r\n                id=\"validationCustom04\"\r\n                name={name}\r\n                value={value}\r\n                onChange={handleChange}\r\n            >\r\n                <option disabled value=\"\">\r\n                    {defaultOption}\r\n                </option>\r\n                {optionsArray &&\r\n                    optionsArray.map((option) => (\r\n                        <option value={option.value} key={option.value}>\r\n                            {option.label}\r\n                        </option>\r\n                    ))}\r\n            </select>\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\nSelectField.propTypes = {\r\n    defaultOption: PropTypes.string,\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    error: PropTypes.string,\r\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n    name: PropTypes.string\r\n};\r\n\r\nexport default SelectField;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst RadioField = ({ options, name, onChange, value, label }) => {\r\n    const handleChange = ({ target }) => {\r\n        onChange({ name: target.name, value: target.value });\r\n    };\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <label className=\"form-label\">{label}</label>\r\n            <div>\r\n                {options.map((option) => (\r\n                    <div\r\n                        key={option.name + \"_\" + option.value}\r\n                        className=\"form-check form-check-inline\"\r\n                    >\r\n                        <input\r\n                            className=\"form-check-input\"\r\n                            type=\"radio\"\r\n                            name={name}\r\n                            id={option.name + \"_\" + option.value}\r\n                            checked={option.value === value}\r\n                            value={option.value}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor={option.name + \"_\" + option.value}\r\n                        >\r\n                            {option.name}\r\n                        </label>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nRadioField.propTypes = {\r\n    options: PropTypes.array,\r\n    name: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    value: PropTypes.string,\r\n    label: PropTypes.string\r\n};\r\n\r\nexport default RadioField;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst MultiSelectField = ({ options, onChange, name, label, defaultValue }) => {\r\n    const optionsArray =\r\n        !Array.isArray(options) && typeof options === \"object\"\r\n            ? Object.keys(options).map((optionName) => ({\r\n                  label: options[optionName].name,\r\n                  value: options[optionName]._id\r\n              }))\r\n            : options;\r\n\r\n    const handleChange = (value) => {\r\n        onChange({ name: name, value });\r\n    };\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <label className=\"form-label\">{label}</label>\r\n            <Select\r\n                isMulti\r\n                closeMenuOnSelect={false}\r\n                defaultValue={defaultValue}\r\n                options={optionsArray}\r\n                className=\"basic-multi-select\"\r\n                classNamePrefix=\"select\"\r\n                onChange={handleChange}\r\n                name={name}\r\n            />\r\n        </div>\r\n    );\r\n};\r\nMultiSelectField.propTypes = {\r\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n    onChange: PropTypes.func,\r\n    name: PropTypes.string,\r\n    label: PropTypes.string,\r\n    defaultValue: PropTypes.array\r\n};\r\n\r\nexport default MultiSelectField;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nconst BackHistoryButton = () => {\r\n    const history = useHistory();\r\n    return (\r\n        <button className=\"btn btn-primary\" onClick={() => history.goBack()}>\r\n            <i className=\"bi bi-caret-left\"></i>\r\n            Назад\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default BackHistoryButton;\r\n","const TOKEN_KEY = \"jwt-token\";\nconst REFRESH_KEY = \"jwt-refresh-token\";\nconst EXPIRES_KEY = \"jwt-expires\";\nconst USERID_KEY = \"user-local-id\";\n\nexport function setTokens({\n    refreshToken,\n    accessToken,\n    userId,\n    expiresIn = 3600\n}) {\n    const expiresDate = new Date().getTime() + expiresIn * 1000;\n    localStorage.setItem(USERID_KEY, userId);\n    localStorage.setItem(TOKEN_KEY, accessToken);\n    localStorage.setItem(REFRESH_KEY, refreshToken);\n    localStorage.setItem(EXPIRES_KEY, expiresDate);\n}\nexport function getAccessToken() {\n    return localStorage.getItem(TOKEN_KEY);\n}\nexport function getRefreshToken() {\n    return localStorage.getItem(REFRESH_KEY);\n}\nexport function removeAuthData() {\n    localStorage.removeItem(USERID_KEY);\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem(REFRESH_KEY);\n    localStorage.removeItem(EXPIRES_KEY);\n}\n\nexport function getTokenExpiresDate() {\n    return localStorage.getItem(EXPIRES_KEY);\n}\nexport function getUserId() {\n    return localStorage.getItem(USERID_KEY);\n}\nconst localStorageService = {\n    setTokens,\n    getAccessToken,\n    getRefreshToken,\n    getTokenExpiresDate,\n    getUserId,\n    removeAuthData\n};\nexport default localStorageService;\n","import axios from \"axios\";\nimport localStorageService from \"./localStorage.service\";\nimport congig from \"../config.json\";\n\nconst httpAuth = axios.create({\n    baseURL: congig.apiEndpoint + \"/auth/\",\n    params: {\n        key: process.env.REACT_APP_FIREBASE_KEY\n    }\n});\n\nconst authService = {\n    register: async (payload) => {\n        const { data } = await httpAuth.post(`signUp`, payload);\n        return data;\n    },\n    login: async ({ email, password }) => {\n        const { data } = await httpAuth.post(`signInWithPassword`, {\n            email,\n            password,\n            returnSecureToken: true\n        });\n        return data;\n    },\n    refresh: async () => {\n        const { data } = await httpAuth.post(\"token\", {\n            grant_type: \"refresh_token\",\n            refresh_token: localStorageService.getRefreshToken()\n        });\n        return data;\n    }\n};\nexport default authService;\n","import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nimport authService from \"./auth.service\";\n\nimport localStorageService from \"./localStorage.service\";\n\nconst http = axios.create({\n    baseURL: configFile.apiEndpoint\n});\n\nhttp.interceptors.request.use(\n    async function (config) {\n        const expiresDate = localStorageService.getTokenExpiresDate();\n        const refreshToken = localStorageService.getRefreshToken();\n        const isExpired = refreshToken && expiresDate < Date.now();\n\n        if (configFile.isFireBase) {\n            const containSlash = /\\/$/gi.test(config.url);\n            config.url =\n                (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n            if (isExpired) {\n                const data = await authService.refresh();\n\n                localStorageService.setTokens({\n                    refreshToken: data.refresh_token,\n                    idToken: data.id_token,\n                    expiresIn: data.expires_in,\n                    localId: data.user_id\n                });\n            }\n            const accessToken = localStorageService.getAccessToken();\n            if (accessToken) {\n                config.params = { ...config.params, auth: accessToken };\n            }\n        } else {\n            if (isExpired) {\n                const data = await authService.refresh();\n\n                // localStorageService.setTokens({\n                //     refreshToken: data.refreshToken,\n                //     accessToken: data.accessToken,\n                //     expiresIn: data.expiresIn,\n                //     userId: data.userId\n                // });\n                localStorageService.setTokens(data);\n            }\n            const accessToken = localStorageService.getAccessToken();\n            if (accessToken) {\n                config.headers = {\n                    ...config.headers,\n                    Authorization: `Bearer ${accessToken}`\n                };\n            }\n        }\n        return config;\n    },\n    function (error) {\n        return Promise.reject(error);\n    }\n);\n\nfunction transormData(data) {\n    return data && !data._id\n        ? Object.keys(data).map((key) => ({\n              ...data[key]\n          }))\n        : data;\n}\n\nhttp.interceptors.response.use(\n    (res) => {\n        if (configFile.isFireBase) {\n            res.data = { content: transormData(res.data) };\n        }\n        res.data = { content: res.data };\n        return res;\n    },\n    function (error) {\n        const expectedErrors =\n            error.response &&\n            error.response.status >= 400 &&\n            error.response.status < 500;\n\n        if (!expectedErrors) {\n            console.log(error);\n            toast.error(\"Somthing was wrong. Try it later\");\n        }\n        return Promise.reject(error);\n    }\n);\nconst httpService = {\n    get: http.get,\n    post: http.post,\n    put: http.put,\n    delete: http.delete,\n    patch: http.patch\n};\nexport default httpService;\n","import httpService from \"./http.service\";\r\nconst qualityEndpoint = \"quality/\";\r\n\r\nconst qualityService = {\r\n    fetchAll: async () => {\r\n        const { data } = await httpService.get(qualityEndpoint);\r\n        return data;\r\n    }\r\n};\r\nexport default qualityService;\r\n","function isOutdated(date) {\r\n    if (Date.now() - date > 10 * 60 * 100) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport default isOutdated;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport qualityService from \"../services/qaulity.service\";\r\nimport isOutdated from \"../utils/isOutdated\";\r\n\r\nconst qualitiesSlice = createSlice({\r\n    name: \"qualities\",\r\n    initialState: {\r\n        entities: null,\r\n        isLoading: true,\r\n        error: null,\r\n        lastFetch: null\r\n    },\r\n    reducers: {\r\n        qualitiesRequested: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        qualitiesReceved: (state, action) => {\r\n            state.entities = action.payload;\r\n            state.lastFetch = Date.now();\r\n            state.isLoading = false;\r\n        },\r\n        qualitiesRequestFiled: (state, action) => {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\nconst { reducer: qualitiesReducer, actions } = qualitiesSlice;\r\nconst { qualitiesRequested, qualitiesReceved, qualitiesRequestFiled } = actions;\r\n\r\nexport const loadQualitiesList = () => async (dispatch, getState) => {\r\n    const { lastFetch } = getState().qualities;\r\n    if (isOutdated(lastFetch)) {\r\n        dispatch(qualitiesRequested());\r\n        try {\r\n            const { content } = await qualityService.fetchAll();\r\n            dispatch(qualitiesReceved(content));\r\n        } catch (error) {\r\n            dispatch(qualitiesRequestFiled(error.message));\r\n        }\r\n    }\r\n};\r\n\r\nexport const getQualities = () => (state) => state.qualities.entities;\r\nexport const getQualitiesLoadingStatus = () => (state) =>\r\n    state.qualities.isLoading;\r\nexport const getQulitiesByIds = (qualitiesIds) => (state) => {\r\n    if (state.qualities.entities) {\r\n        const qualitiesArray = [];\r\n        for (const qualId of qualitiesIds) {\r\n            for (const quality of state.qualities.entities) {\r\n                if (quality._id === qualId) {\r\n                    qualitiesArray.push(quality);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return qualitiesArray;\r\n    }\r\n    return [];\r\n};\r\n\r\nexport default qualitiesReducer;\r\n","import httpService from \"./http.service\";\r\n\r\nconst professionEndpoint = \"profession/\";\r\n\r\nconst professionService = {\r\n    get: async () => {\r\n        const req = await httpService.get(professionEndpoint);\r\n        return req.data;\r\n    }\r\n};\r\nexport default professionService;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport professionService from \"../services/profession.service\";\r\nimport isOutdated from \"../utils/isOutdated\";\r\n\r\nconst professionsSlice = createSlice({\r\n    name: \"professions\",\r\n    initialState: {\r\n        entities: null,\r\n        isLoading: true,\r\n        error: null,\r\n        lastFetch: null\r\n    },\r\n    reducers: {\r\n        professionsRequested: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        professionsReceved: (state, action) => {\r\n            state.entities = action.payload;\r\n            state.lastFetch = Date.now();\r\n            state.isLoading = false;\r\n        },\r\n        professionsRequestFiled: (state, action) => {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\nconst { reducer: professionsReducer, actions } = professionsSlice;\r\nconst { professionsRequested, professionsReceved, professionsRequestFiled } =\r\n    actions;\r\n\r\nexport const loadProfessionsList = () => async (dispatch, getState) => {\r\n    const { lastFetch } = getState().professions;\r\n    if (isOutdated(lastFetch)) {\r\n        console.log(\"lastFetch\", lastFetch);\r\n        dispatch(professionsRequested());\r\n        try {\r\n            const { content } = await professionService.get();\r\n            dispatch(professionsReceved(content));\r\n        } catch (error) {\r\n            dispatch(professionsRequestFiled(error.message));\r\n        }\r\n    }\r\n};\r\nexport const getProfessions = () => (state) => state.professions.entities;\r\nexport const getProfessionsLoadingStatus = () => (state) =>\r\n    state.professions.isLoading;\r\nexport const getProfessionbyId = (id) => (state) => {\r\n    if (state.professions.entities) {\r\n        return state.professions.entities.find((p) => p._id === id);\r\n    }\r\n};\r\nexport default professionsReducer;\r\n","import httpService from \"./http.service\";\r\nimport localStorageService from \"./localStorage.service\";\r\n\r\nconst userEndpoint = \"user/\";\r\n\r\nconst userService = {\r\n    get: async () => {\r\n        const { data } = await httpService.get(userEndpoint);\r\n        return data;\r\n    },\r\n    create: async (payload) => {\r\n        const { data } = await httpService.put(\r\n            userEndpoint + payload._id,\r\n            payload\r\n        );\r\n        return data;\r\n    },\r\n    getCurrentUser: async () => {\r\n        const { data } = await httpService.get(\r\n            userEndpoint + localStorageService.getUserId()\r\n        );\r\n        return data;\r\n    },\r\n    update: async (payload) => {\r\n        const { data } = await httpService.patch(\r\n            userEndpoint + localStorageService.getUserId(),\r\n            payload\r\n        );\r\n        return data;\r\n    }\r\n};\r\nexport default userService;\r\n","export function generetaAuthError(message) {\r\n    switch (message) {\r\n        case \"INVALID_PASSWORD\":\r\n            return \"Email или пароль введены некорректно\";\r\n        case \"EMAIL_EXISTS\":\r\n            return \"Пользователь с таким Email уже существует\";\r\n        default:\r\n            return \"Слишком много попыток входа. Попробуйте позднее\";\r\n    }\r\n}\r\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\nexport default history;\n","import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport authService from \"../services/auth.service\";\nimport localStorageService from \"../services/localStorage.service\";\nimport userService from \"../services/user.service\";\nimport { generetaAuthError } from \"../utils/generateAuthError\";\nimport history from \"../utils/history\";\n\nconst initialState = localStorageService.getAccessToken()\n    ? {\n          entities: null,\n          isLoading: true,\n          error: null,\n          auth: { userId: localStorageService.getUserId() },\n          isLoggedIn: true,\n          dataLoaded: false\n      }\n    : {\n          entities: null,\n          isLoading: false,\n          error: null,\n          auth: null,\n          isLoggedIn: false,\n          dataLoaded: false\n      };\n\nconst usersSlice = createSlice({\n    name: \"users\",\n    initialState,\n    reducers: {\n        usersRequested: (state) => {\n            state.isLoading = true;\n        },\n        usersReceved: (state, action) => {\n            state.entities = action.payload;\n            state.dataLoaded = true;\n            state.isLoading = false;\n        },\n        usersRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        authRequestSuccess: (state, action) => {\n            state.auth = action.payload;\n            state.isLoggedIn = true;\n        },\n        authRequestFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        userCreated: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        userLoggedOut: (state) => {\n            state.entities = null;\n            state.isLoggedIn = false;\n            state.auth = null;\n            state.dataLoaded = false;\n        },\n        userUpdateSuccessed: (state, action) => {\n            state.entities[\n                state.entities.findIndex((u) => u._id === action.payload._id)\n            ] = action.payload;\n        },\n        authRequested: (state) => {\n            state.error = null;\n        }\n    }\n});\n\nconst { reducer: usersReducer, actions } = usersSlice;\nconst {\n    usersRequested,\n    usersReceved,\n    usersRequestFiled,\n    authRequestFailed,\n    authRequestSuccess,\n    userLoggedOut,\n    userUpdateSuccessed\n} = actions;\n\nconst authRequested = createAction(\"users/authRequested\");\nconst userUpdateFailed = createAction(\"users/userUpdateFailed\");\nconst userUpdateRequested = createAction(\"users/userUpdateRequested\");\n\nexport const login =\n    ({ payload, redirect }) =>\n    async (dispatch) => {\n        const { email, password } = payload;\n        dispatch(authRequested());\n        try {\n            const data = await authService.login({ email, password });\n            localStorageService.setTokens(data);\n            dispatch(authRequestSuccess({ userId: data.userId }));\n            history.push(redirect);\n        } catch (error) {\n            const { code, message } = error.response.data.error;\n            if (code === 400) {\n                const errorMessage = generetaAuthError(message);\n                dispatch(authRequestFailed(errorMessage));\n            } else {\n                dispatch(authRequestFailed(error.message));\n            }\n        }\n    };\n\nexport const signUp = (payload) => async (dispatch) => {\n    dispatch(authRequested());\n    try {\n        const data = await authService.register(payload);\n        localStorageService.setTokens(data);\n        dispatch(authRequestSuccess({ userId: data.userId }));\n        history.push(\"/users\");\n    } catch (error) {\n        dispatch(authRequestFailed(error.message));\n    }\n};\n\nexport const logOut = () => (dispatch) => {\n    localStorageService.removeAuthData();\n    dispatch(userLoggedOut());\n    history.push(\"/\");\n};\n\nexport const loadUsersList = () => async (dispatch) => {\n    dispatch(usersRequested());\n    try {\n        const { content } = await userService.get();\n        dispatch(usersReceved(content));\n    } catch (error) {\n        dispatch(usersRequestFiled(error.message));\n    }\n};\nexport const updateUser = (payload) => async (dispatch) => {\n    dispatch(userUpdateRequested());\n    try {\n        const { content } = await userService.update(payload);\n        dispatch(userUpdateSuccessed(content));\n        history.push(`/users/${content._id}`);\n    } catch (error) {\n        dispatch(userUpdateFailed(error.message));\n    }\n};\n\nexport const getUsersList = () => (state) => state.users.entities;\nexport const getCurrentUserData = () => (state) => {\n    return state.users.entities\n        ? state.users.entities.find((u) => u._id === state.users.auth.userId)\n        : null;\n};\nexport const getUserById = (userId) => (state) => {\n    if (state.users.entities) {\n        return state.users.entities.find((u) => u._id === userId);\n    }\n};\n\nexport const getIsLoggedIn = () => (state) => state.users.isLoggedIn;\nexport const getDataStatus = () => (state) => state.users.dataLoaded;\nexport const getUsersLoadingStatus = () => (state) => state.users.isLoading;\nexport const getCurrentUserId = () => (state) => state.users.auth.userId;\nexport const getAuthErrors = () => (state) => state.users.error;\nexport default usersReducer;\n","import EditUserPage from \"./editUserPage\";\r\nexport default EditUserPage;\r\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../../utils/validator\";\nimport TextField from \"../../common/form/textField\";\nimport SelectField from \"../../common/form/selectField\";\nimport RadioField from \"../../common/form/radio.Field\";\nimport MultiSelectField from \"../../common/form/multiSelectField\";\nimport BackHistoryButton from \"../../common/backButton\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    getQualities,\n    getQualitiesLoadingStatus\n} from \"../../../store/qualities\";\nimport {\n    getProfessions,\n    getProfessionsLoadingStatus\n} from \"../../../store/professions\";\nimport { getCurrentUserData, updateUser } from \"../../../store/users\";\n\nconst EditUserPage = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState();\n    const currentUser = useSelector(getCurrentUserData());\n    const dispatch = useDispatch();\n    const qualities = useSelector(getQualities());\n    const qualitiesLoading = useSelector(getQualitiesLoadingStatus());\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }));\n    const professions = useSelector(getProfessions());\n    const professionLoading = useSelector(getProfessionsLoadingStatus());\n    const professionsList = professions.map((p) => ({\n        label: p.name,\n        value: p._id\n    }));\n\n    const [errors, setErrors] = useState({});\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        dispatch(\n            updateUser({\n                ...data,\n                qualities: data.qualities.map((q) => q.value)\n            })\n        );\n    };\n    function getQualitiesListByIds(qualitiesIds) {\n        const qualitiesArray = [];\n        for (const qualId of qualitiesIds) {\n            for (const quality of qualities) {\n                if (quality._id === qualId) {\n                    qualitiesArray.push(quality);\n                    break;\n                }\n            }\n        }\n        return qualitiesArray;\n    }\n    const transformData = (data) => {\n        const result = getQualitiesListByIds(data).map((qual) => ({\n            label: qual.name,\n            value: qual._id\n        }));\n\n        return result;\n    };\n    useEffect(() => {\n        if (!professionLoading && !qualitiesLoading && currentUser && !data) {\n            setData({\n                ...currentUser,\n                qualities: transformData(currentUser.qualities)\n            });\n        }\n    }, [professionLoading, qualitiesLoading, currentUser, data]);\n    useEffect(() => {\n        if (data && isLoading) {\n            setIsLoading(false);\n        }\n    }, [data]);\n\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n\n        name: {\n            isRequired: {\n                message: \"Введите ваше имя\"\n            }\n        }\n    };\n    useEffect(() => validate(), [data]);\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n    return (\n        <div className=\"container mt-5\">\n            <BackHistoryButton />\n            <div className=\"row\">\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\n                    {!isLoading && Object.keys(professions).length > 0 ? (\n                        <form onSubmit={handleSubmit}>\n                            <TextField\n                                label=\"Имя\"\n                                name=\"name\"\n                                value={data.name}\n                                onChange={handleChange}\n                                error={errors.name}\n                            />\n                            <TextField\n                                label=\"Электронная почта\"\n                                name=\"email\"\n                                value={data.email}\n                                onChange={handleChange}\n                                error={errors.email}\n                            />\n                            <SelectField\n                                label=\"Выбери свою профессию\"\n                                defaultOption=\"Choose...\"\n                                name=\"profession\"\n                                options={professionsList}\n                                onChange={handleChange}\n                                value={data.profession}\n                                error={errors.profession}\n                            />\n                            <RadioField\n                                options={[\n                                    { name: \"Male\", value: \"male\" },\n                                    { name: \"Female\", value: \"female\" },\n                                    { name: \"Other\", value: \"other\" }\n                                ]}\n                                value={data.sex}\n                                name=\"sex\"\n                                onChange={handleChange}\n                                label=\"Выберите ваш пол\"\n                            />\n                            <MultiSelectField\n                                defaultValue={data.qualities}\n                                options={qualitiesList}\n                                onChange={handleChange}\n                                name=\"qualities\"\n                                label=\"Выберите ваши качесвта\"\n                            />\n                            <button\n                                type=\"submit\"\n                                disabled={!isValid}\n                                className=\"btn btn-primary w-100 mx-auto\"\n                            >\n                                Обновить\n                            </button>\n                        </form>\n                    ) : (\n                        \"Loading...\"\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default EditUserPage;\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCurrentUserData } from \"../../store/users\";\r\nconst UserCard = ({ user }) => {\r\n    const history = useHistory();\r\n\r\n    const currentUser = useSelector(getCurrentUserData());\r\n    const handleClick = () => {\r\n        history.push(history.location.pathname + \"/edit\");\r\n    };\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-body\">\r\n                {currentUser._id === user._id && (\r\n                    <button\r\n                        className=\"position-absolute top-0 end-0 btn btn-light btn-sm\"\r\n                        onClick={handleClick}\r\n                    >\r\n                        <i className=\"bi bi-gear\"></i>\r\n                    </button>\r\n                )}\r\n\r\n                <div className=\"d-flex flex-column align-items-center text-center position-relative\">\r\n                    <img\r\n                        src={user.image}\r\n                        className=\"rounded-circle\"\r\n                        width=\"150\"\r\n                    />\r\n                    <div className=\"mt-3\">\r\n                        <h4>{user.name}</h4>\r\n                        <p className=\"text-secondary mb-1\">\r\n                            {user.profession.name}\r\n                        </p>\r\n                        <div className=\"text-muted\">\r\n                            <i\r\n                                className=\"bi bi-caret-down-fill text-primary\"\r\n                                role=\"button\"\r\n                            ></i>\r\n                            <i\r\n                                className=\"bi bi-caret-up text-secondary\"\r\n                                role=\"button\"\r\n                            ></i>\r\n                            <span className=\"ms-2\">{user.rate}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nUserCard.propTypes = {\r\n    user: PropTypes.object\r\n};\r\n\r\nexport default UserCard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst Quality = ({ _id, color, name }) => {\r\n    return (\r\n        <span className={\"badge m-1 bg-\" + color} key={_id}>\r\n            {name}\r\n        </span>\r\n    );\r\n    // return \"something\";\r\n};\r\nQuality.propTypes = {\r\n    _id: PropTypes.string.isRequired,\r\n    color: PropTypes.string,\r\n    name: PropTypes.string\r\n};\r\n\r\nexport default Quality;\r\n","import Qualities from \"./qualitiesList\";\r\nexport default Qualities;\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Quality from \"./quality\";\r\nimport {\r\n    getQualitiesLoadingStatus,\r\n    getQulitiesByIds,\r\n    loadQualitiesList\r\n} from \"../../../store/qualities\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst QualitiesList = ({ qualities }) => {\r\n    const dispatch = useDispatch();\r\n    const isLoading = useSelector(getQualitiesLoadingStatus());\r\n    const qualitiesList = useSelector(getQulitiesByIds(qualities));\r\n    useEffect(() => {\r\n        dispatch(loadQualitiesList());\r\n    }, []);\r\n\r\n    if (isLoading) return \"Loadind ...\";\r\n\r\n    return (\r\n        <>\r\n            {qualitiesList.map((qual) => (\r\n                <Quality key={qual._id} {...qual} />\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nQualitiesList.propTypes = {\r\n    qualities: PropTypes.array\r\n};\r\n\r\nexport default QualitiesList;\r\n","import React from \"react\";\r\nimport Qualities from \"./qualities\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst QualitiesCard = ({ data }) => {\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\r\n                <h5 className=\"card-title\">\r\n                    <span>Qualities</span>\r\n                </h5>\r\n                <p className=\"card-text\">\r\n                    <Qualities qualities={data} />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nQualitiesCard.propTypes = {\r\n    data: PropTypes.array\r\n};\r\n\r\nexport default QualitiesCard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst MeetingsCard = ({ value }) => {\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\r\n                <h5 className=\"card-title\">\r\n                    <span>Completed meetings</span>\r\n                </h5>\r\n\r\n                <h1 className=\"display-1\">{value}</h1>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nMeetingsCard.propTypes = {\r\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n};\r\n\r\nexport default MeetingsCard;\r\n","export function displayDate(data) {\n    const date = new Date(data);\n    const dateNow = new Date();\n    const yearDif = dateNow.getFullYear() - date.getFullYear();\n    if (yearDif === 0) {\n        const dayDif = dateNow.getDay() - date.getDay();\n        if (dayDif === 0) {\n            const hourDif = dateNow.getHours() - date.getHours();\n            if (hourDif === 0) {\n                const minutesDif = dateNow.getMinutes() - date.getMinutes();\n\n                if (minutesDif >= 0 && minutesDif < 5) return \"1 минуту назад\";\n                if (minutesDif >= 5 && minutesDif < 10) return \"5 минут назад\";\n                if (minutesDif >= 10 && minutesDif < 30) {\n                    return \"10 минут назад\";\n                }\n                return \"30 минут назад\";\n            }\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }\n\n        return `${date.getDay()} ${date.toLocaleString(\"default\", {\n            month: \"long\"\n        })}`;\n    }\n    return (\n        date.getFullYear() + \".\" + (date.getMonth() + 1) + \"_\" + date.getDate()\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { displayDate } from \"../../../utils/displayDate\";\nimport { getCurrentUserId, getUserById } from \"../../../store/users\";\nimport { useSelector } from \"react-redux\";\nconst Comment = ({\n    content,\n    created_at: created,\n    _id: id,\n    userId,\n    onRemove\n}) => {\n    const currentUserId = useSelector(getCurrentUserId());\n    const user = useSelector(getUserById(userId));\n\n    return (\n        <div className=\"bg-light card-body  mb-3\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"d-flex flex-start \">\n                        <img\n                            src={user.image}\n                            className=\"rounded-circle shadow-1-strong me-3\"\n                            alt=\"avatar\"\n                            width=\"65\"\n                            height=\"65\"\n                        />\n                        <div className=\"flex-grow-1 flex-shrink-1\">\n                            <div className=\"mb-4\">\n                                <div className=\"d-flex justify-content-between align-items-center\">\n                                    <p className=\"mb-1 \">\n                                        {user && user.name}{\" \"}\n                                        <span className=\"small\">\n                                            - {displayDate(created)}\n                                        </span>\n                                    </p>\n                                    {currentUserId === userId && (\n                                        <button\n                                            className=\"btn btn-sm text-primary d-flex align-items-center\"\n                                            onClick={() => onRemove(id)}\n                                        >\n                                            <i className=\"bi bi-x-lg\" />\n                                        </button>\n                                    )}\n                                </div>\n                                <p className=\"small mb-0\">{content}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nComment.propTypes = {\n    content: PropTypes.string,\n    edited_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    created_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    userId: PropTypes.string,\n    onRemove: PropTypes.func,\n    _id: PropTypes.string\n};\n\nexport default Comment;\n","import React from \"react\";\r\n\r\nimport Comment from \"./comment\";\r\nimport PropTypes from \"prop-types\";\r\nconst CommentsList = ({ comments, onRemove }) => {\r\n    return comments.map((comment) => (\r\n        <Comment key={comment._id} {...comment} onRemove={onRemove} />\r\n    ));\r\n};\r\nCommentsList.propTypes = {\r\n    comment: PropTypes.array,\r\n    onRemove: PropTypes.func\r\n};\r\n\r\nexport default CommentsList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TextAreaField = ({ label, name, value, onChange, error }) => {\r\n    const handleChange = ({ target }) => {\r\n        onChange({ name: target.name, value: target.value });\r\n    };\r\n    const getInputClasses = () => {\r\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <label htmlFor={name}> {label}</label>\r\n            <div className=\"input-group has-validation\">\r\n                <textarea\r\n                    id={name}\r\n                    name={name}\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    className={getInputClasses()}\r\n                />\r\n\r\n                {error && <div className=\"invalid-feedback \">{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nTextAreaField.defaultProps = {\r\n    type: \"text\"\r\n};\r\nTextAreaField.propTypes = {\r\n    label: PropTypes.string,\r\n    type: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default TextAreaField;\r\n","import React, { useState } from \"react\";\nimport TextAreaField from \"../form/textAreaField\";\nimport { validator } from \"../../../utils/validator\";\nimport PropTypes from \"prop-types\";\n\nconst AddCommentForm = ({ onSubmit }) => {\n    const [data, setData] = useState({});\n    const [errors, setErrors] = useState({});\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfog = {\n        content: {\n            isRequired: {\n                message: \"Сообщение не может быть пустым\"\n            }\n        }\n    };\n\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n\n    const clearForm = () => {\n        setData({});\n        setErrors({});\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        onSubmit(data);\n        console.log(data);\n        clearForm();\n    };\n\n    return (\n        <div>\n            <h2>New comment</h2>\n            <form onSubmit={handleSubmit}>\n                <TextAreaField\n                    value={data.content || \"\"}\n                    onChange={handleChange}\n                    name=\"content\"\n                    label=\"Сообщение\"\n                    error={errors.content}\n                />\n                <div className=\"d-flex justify-content-end\">\n                    <button className=\"btn btn-primary\">Опубликовать</button>\n                </div>\n            </form>\n        </div>\n    );\n};\nAddCommentForm.propTypes = {\n    onSubmit: PropTypes.func\n};\n\nexport default AddCommentForm;\n","import CommentsList from \"./commentsList\";\r\nimport AddCommentForm from \"./addCommentForm\";\r\nexport default CommentsList;\r\nexport { AddCommentForm };\r\n","import httpService from \"./http.service\";\nconst commentEndpoint = \"comment/\";\n\nconst commentService = {\n    createComment: async (payload) => {\n        const { data } = await httpService.post(commentEndpoint, payload);\n        return data;\n    },\n    getComments: async (pageId) => {\n        const { data } = await httpService.get(commentEndpoint, {\n            params: {\n                orderBy: \"pageId\",\n                equalTo: `${pageId}`\n            }\n        });\n        return data;\n    },\n    removeComment: async (commentId) => {\n        const { data } = await httpService.delete(commentEndpoint + commentId);\n        return data;\n    }\n};\nexport default commentService;\n","import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\n\nconst commentsSlice = createSlice({\n    name: \"comments\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null\n    },\n    reducers: {\n        commentsRequested: (state) => {\n            state.isLoading = true;\n        },\n        commentsReceved: (state, action) => {\n            state.entities = action.payload;\n            state.isLoading = false;\n        },\n        commentsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        commetnCreated: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        commentRemoved: (state, action) => {\n            state.entities = state.entities.filter(\n                (c) => c._id !== action.payload\n            );\n        }\n    }\n});\n\nconst { reducer: commentsReducer, actions } = commentsSlice;\nconst {\n    commentsRequested,\n    commentsReceved,\n    commentsRequestFiled,\n    commetnCreated,\n    commentRemoved\n} = actions;\n\nconst addCommentRequested = createAction(\"comments/addCommentRequested\");\nconst removeCommentRequested = createAction(\"comments/removeCommentRequested\");\n\nexport const loadCommentsList = (userId) => async (dispatch) => {\n    dispatch(commentsRequested());\n    try {\n        const { content } = await commentService.getComments(userId);\n        dispatch(commentsReceved(content));\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\nexport const createComment = (payload) => async (dispatch) => {\n    dispatch(addCommentRequested());\n    try {\n        const { content } = await commentService.createComment(payload);\n        dispatch(commetnCreated(content));\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\nexport const removeComment = (commentId) => async (dispatch) => {\n    dispatch(removeCommentRequested());\n    try {\n        const { content } = await commentService.removeComment(commentId);\n        if (!content) {\n            dispatch(commentRemoved(commentId));\n        }\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\n\nexport const getComments = () => (state) => state.comments.entities;\nexport const getCommentsLoadingStatus = () => (state) =>\n    state.comments.isLoading;\n\nexport default commentsReducer;\n","import { orderBy } from \"lodash\";\nimport React, { useEffect } from \"react\";\nimport CommentsList, { AddCommentForm } from \"../common/comments\";\nimport {\n    createComment,\n    getComments,\n    getCommentsLoadingStatus,\n    loadCommentsList,\n    removeComment\n} from \"../../store/comments\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\n\nconst Comments = () => {\n    const { userId } = useParams();\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(loadCommentsList(userId));\n    }, [userId]);\n    const isLoading = useSelector(getCommentsLoadingStatus());\n\n    const comments = useSelector(getComments());\n    const handleSubmit = (data) => {\n        dispatch(createComment({ ...data, pageId: userId }));\n    };\n    const handleRemoveComment = (id) => {\n        dispatch(removeComment(id));\n    };\n    const sortedComments = orderBy(comments, [\"created_at\"], [\"desc\"]);\n    return (\n        <>\n            <div className=\"card mb-2\">\n                <div className=\"card-body \">\n                    <AddCommentForm onSubmit={handleSubmit} />\n                </div>\n            </div>\n            {sortedComments.length > 0 && (\n                <div className=\"card mb-3\">\n                    <div className=\"card-body \">\n                        <h2>Comments</h2>\n                        <hr />\n                        {!isLoading ? (\n                            <CommentsList\n                                comments={sortedComments}\n                                onRemove={handleRemoveComment}\n                            />\n                        ) : (\n                            \"loading...\"\n                        )}\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default Comments;\n","import UserPage from \"./userPage\";\r\nexport default UserPage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport UserCard from \"../../ui/userCard\";\r\nimport QualitiesCard from \"../../ui/qualitiesCard\";\r\nimport MeetingsCard from \"../../ui/meetingsCard\";\r\nimport Comments from \"../../ui/comments\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { getUserById } from \"../../../store/users\";\r\n\r\nconst UserPage = ({ userId }) => {\r\n    const user = useSelector(getUserById(userId));\r\n\r\n    if (user) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row gutters-sm\">\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <UserCard user={user} />\r\n                        <QualitiesCard data={user.qualities} />\r\n                        <MeetingsCard value={user.completedMeetings} />\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        <Comments />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <h1>Loading</h1>;\r\n    }\r\n};\r\n\r\nUserPage.propTypes = {\r\n    userId: PropTypes.string.isRequired\r\n};\r\n\r\nexport default UserPage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport _ from \"lodash\";\r\nconst Pagination = ({ itemsCount, pageSize, onPageChange, currentPage }) => {\r\n    const pagesCount = Math.ceil(itemsCount / pageSize);\r\n    const pages = _.range(1, pagesCount + 1);\r\n\r\n    if (pagesCount === 1) return null;\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n                {pages.map((page) => (\r\n                    <li\r\n                        key={page}\r\n                        className={\r\n                            \"page-item \" +\r\n                            (page === currentPage ? \"active\" : \"\")\r\n                        }\r\n                    >\r\n                        <a\r\n                            className=\"page-link\"\r\n                            onClick={() => {\r\n                                onPageChange(page);\r\n                            }}\r\n                        >\r\n                            {page}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\nPagination.propTypes = {\r\n    itemsCount: PropTypes.number.isRequired,\r\n    pageSize: PropTypes.number.isRequired,\r\n    currentPage: PropTypes.number.isRequired,\r\n    onPageChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GroupList = ({\r\n    items,\r\n    valueProperty,\r\n    contentProperty,\r\n    onItemSelect,\r\n    selectedItem\r\n}) => {\r\n    if (!Array.isArray(items)) {\r\n        return (\r\n            <ul className=\"list-group\">\r\n                {Object.keys(items).map((item) => (\r\n                    <li\r\n                        key={items[item][valueProperty]}\r\n                        className={\r\n                            \"list-group-item\" +\r\n                            (items[item] === selectedItem ? \" active\" : \"\")\r\n                        }\r\n                        onClick={() => onItemSelect(items[item])}\r\n                        role=\"button\"\r\n                    >\r\n                        {items[item][contentProperty]}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        );\r\n    }\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {items.map((item) => (\r\n                <li\r\n                    key={item[valueProperty]}\r\n                    className={\r\n                        \"list-group-item\" +\r\n                        (item === selectedItem ? \" active\" : \"\")\r\n                    }\r\n                    onClick={() => onItemSelect(item)}\r\n                    role=\"button\"\r\n                >\r\n                    {item[contentProperty]}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\nGroupList.defaultProps = {\r\n    valueProperty: \"_id\",\r\n    contentProperty: \"name\"\r\n};\r\nGroupList.propTypes = {\r\n    items: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n    valueProperty: PropTypes.string.isRequired,\r\n    contentProperty: PropTypes.string.isRequired,\r\n    onItemSelect: PropTypes.func,\r\n    selectedItem: PropTypes.object\r\n};\r\n\r\nexport default GroupList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst SearchStatus = ({ length }) => {\r\n    const renderPhrase = (number) => {\r\n        const lastOne = Number(number.toString().slice(-1));\r\n        if (number > 4 && number < 15) {\r\n            return \"человек тусанет\";\r\n        }\r\n        if (lastOne === 1) return \"человек тусанет\";\r\n        if ([2, 3, 4].indexOf(lastOne) >= 0) return \"человека тусанут\";\r\n        return \"человек тусанет\";\r\n    };\r\n    return (\r\n        <h2>\r\n            <span\r\n                className={\"badge \" + (length > 0 ? \"bg-primary\" : \"bg-danger\")}\r\n            >\r\n                {length > 0\r\n                    ? `${length + \" \" + renderPhrase(length)}   с тобой сегодня`\r\n                    : \"Никто с тобой не тусанет\"}\r\n            </span>\r\n        </h2>\r\n    );\r\n};\r\nSearchStatus.propTypes = {\r\n    length: PropTypes.number\r\n};\r\n\r\nexport default SearchStatus;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst BookMark = ({ status, ...rest }) => {\r\n    return (\r\n        <button {...rest}>\r\n            <i className={\"bi bi-bookmark\" + (status ? \"-heart-fill\" : \"\")}></i>\r\n        </button>\r\n    );\r\n};\r\nBookMark.propTypes = {\r\n    status: PropTypes.bool\r\n};\r\n\r\nexport default BookMark;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport _ from \"lodash\";\r\n\r\nconst TableBody = ({ data, columns }) => {\r\n    const renderContent = (item, column) => {\r\n        if (columns[column].component) {\r\n            const component = columns[column].component;\r\n            if (typeof component === \"function\") {\r\n                return component(item);\r\n            }\r\n            return component;\r\n        }\r\n        return _.get(item, columns[column].path);\r\n    };\r\n    return (\r\n        <tbody>\r\n            {data.map((item) => (\r\n                <tr key={item._id}>\r\n                    {Object.keys(columns).map((column) => (\r\n                        <td key={column}>{renderContent(item, column)}</td>\r\n                    ))}\r\n                </tr>\r\n            ))}\r\n        </tbody>\r\n    );\r\n};\r\n\r\nTableBody.propTypes = {\r\n    data: PropTypes.array.isRequired,\r\n    columns: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TableBody;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst TableHeader = ({ onSort, selectedSort, columns }) => {\r\n    const handleSort = (item) => {\r\n        if (selectedSort.path === item) {\r\n            onSort({\r\n                ...selectedSort,\r\n                order: selectedSort.order === \"asc\" ? \"desc\" : \"asc\"\r\n            });\r\n        } else {\r\n            onSort({ path: item, order: \"asc\" });\r\n        }\r\n    };\r\n    const rendeSortArrow = (selectedSort, currentPath) => {\r\n        if (selectedSort.path === currentPath) {\r\n            if (selectedSort.order === \"asc\") {\r\n                return <i className=\"bi bi-caret-down-fill\"></i>;\r\n            } else {\r\n                return <i className=\"bi bi-caret-up-fill\"></i>;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {Object.keys(columns).map((column) => (\r\n                    <th\r\n                        key={column}\r\n                        onClick={\r\n                            columns[column].path\r\n                                ? () => handleSort(columns[column].path)\r\n                                : undefined\r\n                        }\r\n                        {...{ role: columns[column].path && \"button\" }}\r\n                        scope=\"col\"\r\n                    >\r\n                        {columns[column].name}{\" \"}\r\n                        {rendeSortArrow(selectedSort, columns[column].path)}\r\n                    </th>\r\n                ))}\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\nTableHeader.propTypes = {\r\n    onSort: PropTypes.func.isRequired,\r\n    selectedSort: PropTypes.object.isRequired,\r\n    columns: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TableHeader;\r\n","import Table from \"./table\";\r\nimport TableBody from \"./tableBody\";\r\nimport TableHeader from \"./tableHeader\";\r\n\r\nexport default Table;\r\n\r\nexport { TableBody, TableHeader };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TableBody from \"./tableBody\";\r\nimport TableHeader from \"./tableHeader\";\r\n\r\nconst Table = ({ onSort, selectedSort, columns, data, children }) => {\r\n    return (\r\n        <table className=\"table\">\r\n            {children || (\r\n                <>\r\n                    <TableHeader {...{ onSort, selectedSort, columns }} />\r\n                    <TableBody {...{ columns, data }} />\r\n                </>\r\n            )}\r\n        </table>\r\n    );\r\n};\r\nTable.propTypes = {\r\n    onSort: PropTypes.func,\r\n    selectedSort: PropTypes.object,\r\n    columns: PropTypes.object,\r\n    data: PropTypes.array,\r\n    children: PropTypes.array\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n    getProfessionbyId,\r\n    getProfessionsLoadingStatus\r\n} from \"../../store/professions\";\r\n\r\nconst Profession = ({ id }) => {\r\n    const isLoading = useSelector(getProfessionsLoadingStatus());\r\n    const prof = useSelector(getProfessionbyId(id));\r\n    if (!isLoading) {\r\n        return <p>{prof.name}</p>;\r\n    } else return \"loading ...\";\r\n};\r\nProfession.propTypes = {\r\n    id: PropTypes.string\r\n};\r\nexport default Profession;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport BookMark from \"../common/bookmark\";\r\nimport Qualities from \"./qualities\";\r\nimport Table from \"../common/table\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Profession from \"./profession\";\r\n\r\nconst UserTable = ({\r\n    users,\r\n    onSort,\r\n    selectedSort,\r\n    onToggleBookMark,\r\n    ...rest\r\n}) => {\r\n    const columns = {\r\n        name: {\r\n            path: \"name\",\r\n            name: \"Имя\",\r\n            component: (user) => (\r\n                <Link to={`/users/${user._id}`}>{user.name}</Link>\r\n            )\r\n        },\r\n        qualities: {\r\n            name: \"Качества\",\r\n            component: (user) => <Qualities qualities={user.qualities} />\r\n        },\r\n        professions: {\r\n            name: \"Профессия\",\r\n            component: (user) => <Profession id={user.profession} />\r\n        },\r\n        completedMeetings: {\r\n            path: \"completedMeetings\",\r\n            name: \"Встретился, раз\"\r\n        },\r\n        rate: { path: \"rate\", name: \"Оценка\" },\r\n        bookmark: {\r\n            path: \"bookmark\",\r\n            name: \"Избранное\",\r\n            component: (user) => (\r\n                <BookMark\r\n                    status={user.bookmark}\r\n                    onClick={() => onToggleBookMark(user._id)}\r\n                />\r\n            )\r\n        }\r\n    };\r\n    return (\r\n        <Table\r\n            onSort={onSort}\r\n            selectedSort={selectedSort}\r\n            columns={columns}\r\n            data={users}\r\n        />\r\n    );\r\n};\r\n\r\nUserTable.propTypes = {\r\n    users: PropTypes.array.isRequired,\r\n    onSort: PropTypes.func.isRequired,\r\n    selectedSort: PropTypes.object.isRequired,\r\n    onToggleBookMark: PropTypes.func.isRequired\r\n};\r\n\r\nexport default UserTable;\r\n","import UsersListPage from \"./usersListPage\";\r\nexport default UsersListPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { paginate } from \"../../../utils/paginate\";\r\nimport Pagination from \"../../common/pagination\";\r\nimport GroupList from \"../../common/groupList\";\r\nimport SearchStatus from \"../../ui/searchStatus\";\r\nimport UserTable from \"../../ui/usersTable\";\r\nimport _ from \"lodash\";\r\nimport {\r\n    getProfessions,\r\n    getProfessionsLoadingStatus\r\n} from \"../../../store/professions\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCurrentUserId, getUsersList } from \"../../../store/users\";\r\nconst UsersListPage = () => {\r\n    const users = useSelector(getUsersList());\r\n    const currentUserId = useSelector(getCurrentUserId());\r\n\r\n    const professions = useSelector(getProfessions());\r\n    const professionsLoading = useSelector(getProfessionsLoadingStatus());\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    const [selectedProf, setSelectedProf] = useState();\r\n    const [sortBy, setSortBy] = useState({ path: \"name\", order: \"asc\" });\r\n    const pageSize = 8;\r\n\r\n    const handleDelete = (userId) => {\r\n        console.log(\"delete user\");\r\n        // setUsers(users.filter((user) => user._id !== userId));\r\n    };\r\n    const handleToggleBookMark = (id) => {\r\n        const newArray = users.map((user) => {\r\n            if (user._id === id) {\r\n                return { ...user, bookmark: !user.bookmark };\r\n            }\r\n            return user;\r\n        });\r\n        // setUsers(newArray);\r\n        console.log(newArray);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n    }, [selectedProf, searchQuery]);\r\n\r\n    const handleProfessionSelect = (item) => {\r\n        if (searchQuery !== \"\") setSearchQuery(\"\");\r\n        setSelectedProf(item);\r\n    };\r\n    const handleSearchQuery = ({ target }) => {\r\n        setSelectedProf(undefined);\r\n        setSearchQuery(target.value);\r\n    };\r\n\r\n    const handlePageChange = (pageIndex) => {\r\n        setCurrentPage(pageIndex);\r\n    };\r\n    const handleSort = (item) => {\r\n        setSortBy(item);\r\n    };\r\n\r\n    function filterUsers(data) {\r\n        const filteredUsers = searchQuery\r\n            ? data.filter(\r\n                  (user) =>\r\n                      user.name\r\n                          .toLowerCase()\r\n                          .indexOf(searchQuery.toLowerCase()) !== -1\r\n              )\r\n            : selectedProf\r\n            ? data.filter((user) => user.profession === selectedProf._id)\r\n            : data;\r\n        return filteredUsers.filter((u) => u._id !== currentUserId);\r\n    }\r\n    const filteredUsers = filterUsers(users);\r\n    const count = filteredUsers.length;\r\n    const sortedUsers = _.orderBy(filteredUsers, [sortBy.path], [sortBy.order]);\r\n    const usersCrop = paginate(sortedUsers, currentPage, pageSize);\r\n    const clearFilter = () => {\r\n        setSelectedProf();\r\n    };\r\n\r\n    return (\r\n        <div className=\"d-flex\">\r\n            {professions && !professionsLoading && (\r\n                <div className=\"d-flex flex-column flex-shrink-0 p-3\">\r\n                    <GroupList\r\n                        selectedItem={selectedProf}\r\n                        items={professions}\r\n                        onItemSelect={handleProfessionSelect}\r\n                    />\r\n                    <button\r\n                        className=\"btn btn-secondary mt-2\"\r\n                        onClick={clearFilter}\r\n                    >\r\n                        Очиститть\r\n                    </button>\r\n                </div>\r\n            )}\r\n            <div className=\"d-flex flex-column\">\r\n                <SearchStatus length={count} />\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"searchQuery\"\r\n                    placeholder=\"Search...\"\r\n                    onChange={handleSearchQuery}\r\n                    value={searchQuery}\r\n                />\r\n                {count > 0 && (\r\n                    <UserTable\r\n                        users={usersCrop}\r\n                        onSort={handleSort}\r\n                        selectedSort={sortBy}\r\n                        onDelete={handleDelete}\r\n                        onToggleBookMark={handleToggleBookMark}\r\n                    />\r\n                )}\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <Pagination\r\n                        itemsCount={count}\r\n                        pageSize={pageSize}\r\n                        currentPage={currentPage}\r\n                        onPageChange={handlePageChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nUsersListPage.propTypes = {\r\n    users: PropTypes.array\r\n};\r\n\r\nexport default UsersListPage;\r\n","import _ from \"lodash\";\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n    const startIndex = (pageNumber - 1) * pageSize;\r\n    return _(items).slice(startIndex).take(pageSize).value();\r\n}\r\n","import { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getDataStatus, loadUsersList } from \"../../../store/users\";\r\n\r\nconst UsersLoader = ({ children }) => {\r\n    const dataStatus = useSelector(getDataStatus());\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (!dataStatus) dispatch(loadUsersList());\r\n    }, []);\r\n    if (!dataStatus) return \"Loading\";\r\n    return children;\r\n};\r\n\r\nUsersLoader.propTypes = {\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n};\r\nexport default UsersLoader;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useParams, Redirect } from \"react-router-dom\";\r\nimport EditUserPage from \"../components/page/editUserPage\";\r\nimport UserPage from \"../components/page/userPage\";\r\nimport UsersListPage from \"../components/page/usersListPage\";\r\nimport UsersLoader from \"../components/ui/hoc/usersLoader\";\r\n\r\nimport { getCurrentUserId } from \"../store/users\";\r\nconst Users = () => {\r\n    const params = useParams();\r\n    const { userId, edit } = params;\r\n    const currentUserId = useSelector(getCurrentUserId());\r\n\r\n    return (\r\n        <>\r\n            <UsersLoader>\r\n                {userId ? (\r\n                    edit ? (\r\n                        userId === currentUserId ? (\r\n                            <EditUserPage />\r\n                        ) : (\r\n                            <Redirect to={`/users/${currentUserId}/edit`} />\r\n                        )\r\n                    ) : (\r\n                        <UserPage userId={userId} />\r\n                    )\r\n                ) : (\r\n                    <UsersListPage />\r\n                )}\r\n            </UsersLoader>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CheckBoxField = ({ name, value, onChange, children, error }) => {\r\n    const handleChange = () => {\r\n        onChange({ name: name, value: !value });\r\n    };\r\n    const getInputClasses = () => {\r\n        return \"form-check-input\" + (error ? \" is-invalid\" : \"\");\r\n    };\r\n    return (\r\n        <div className=\"form-check mb-4\">\r\n            <input\r\n                className={getInputClasses()}\r\n                type=\"checkbox\"\r\n                value=\"\"\r\n                id={name}\r\n                onChange={handleChange}\r\n                checked={value}\r\n            />\r\n            <label className=\"form-check-label \" htmlFor={name}>\r\n                {children}\r\n            </label>\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\nCheckBoxField.propTypes = {\r\n    name: PropTypes.string,\r\n    value: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ]),\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default CheckBoxField;\r\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAuthErrors, login } from \"../../store/users\";\n\nconst LoginForm = () => {\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        stayOn: false\n    });\n    const loginError = useSelector(getAuthErrors());\n    const history = useHistory();\n    const dispath = useDispatch();\n    const [errors, setErrors] = useState({});\n\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязателкн для заполнения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const redirect = history.location.state\n            ? history.location.state.from.pathname\n            : \"/\";\n\n        dispath(login({ payload: data, redirect }));\n    };\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <CheckBoxField\n                value={data.stayOn}\n                onChange={handleChange}\n                name=\"stayOn\"\n            >\n                Оставаться в системе\n            </CheckBoxField>\n            {loginError && <p className=\"text-danger\">{loginError}</p>}\n\n            <button\n                type=\"submit\"\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n            >\n                Submit\n            </button>\n        </form>\n    );\n};\n\nexport default LoginForm;\n","import React, { useEffect, useState } from \"react\";\nimport { validator } from \"../../utils/validator\";\nimport TextField from \"../common/form/textField\";\nimport SelectField from \"../common/form/selectField\";\nimport RadioField from \"../common/form/radio.Field\";\nimport MultiSelectField from \"../common/form/multiSelectField\";\nimport CheckBoxField from \"../common/form/checkBoxField\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getQualities } from \"../../store/qualities\";\nimport { getProfessions } from \"../../store/professions\";\nimport { signUp } from \"../../store/users\";\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n    const [data, setData] = useState({\n        email: \"\",\n        password: \"\",\n        profession: \"\",\n        sex: \"male\",\n        name: \"\",\n        qualities: [],\n        licence: false\n    });\n\n    const qualities = useSelector(getQualities());\n    const qualitiesList = qualities.map((q) => ({\n        label: q.name,\n        value: q._id\n    }));\n    const professions = useSelector(getProfessions());\n\n    const professionsList = professions.map((p) => ({\n        label: p.name,\n        value: p._id\n    }));\n    const [errors, setErrors] = useState({});\n\n    const handleChange = (target) => {\n        setData((prevState) => ({\n            ...prevState,\n            [target.name]: target.value\n        }));\n    };\n    const validatorConfog = {\n        email: {\n            isRequired: {\n                message: \"Электронная почта обязательна для заполнения\"\n            },\n            isEmail: {\n                message: \"Email введен некорректно\"\n            }\n        },\n        name: {\n            isRequired: {\n                message: \"Имя обязательно для заполнения\"\n            },\n            min: {\n                message: \"Имя должено состаять миниму из 3 символов\",\n                value: 3\n            }\n        },\n        password: {\n            isRequired: {\n                message: \"Пароль обязательна для заполнения\"\n            },\n            isCapitalSymbol: {\n                message: \"Пароль должен содержать хотя бы одну заглавную букву\"\n            },\n            isContainDigit: {\n                message: \"Пароль должен содержать хотя бы одно число\"\n            },\n            min: {\n                message: \"Пароль должен состаять миниму из 8 символов\",\n                value: 8\n            }\n        },\n        profession: {\n            isRequired: {\n                message: \"Обязательно выберите вашу профессию\"\n            }\n        },\n        licence: {\n            isRequired: {\n                message:\n                    \"Вы не можете использовать наш сервис без подтреврждения лицензионного соглашения\"\n            }\n        }\n    };\n    useEffect(() => {\n        validate();\n    }, [data]);\n    const validate = () => {\n        const errors = validator(data, validatorConfog);\n        setErrors(errors);\n        return Object.keys(errors).length === 0;\n    };\n    const isValid = Object.keys(errors).length === 0;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isValid = validate();\n        if (!isValid) return;\n        const newData = {\n            ...data,\n            qualities: data.qualities.map((q) => q.value)\n        };\n        dispatch(signUp(newData));\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <TextField\n                label=\"Электронная почта\"\n                name=\"email\"\n                value={data.email}\n                onChange={handleChange}\n                error={errors.email}\n            />\n            <TextField\n                label=\"Имя\"\n                name=\"name\"\n                value={data.name}\n                onChange={handleChange}\n                error={errors.name}\n            />\n            <TextField\n                label=\"Пароль\"\n                type=\"password\"\n                name=\"password\"\n                value={data.password}\n                onChange={handleChange}\n                error={errors.password}\n            />\n            <SelectField\n                label=\"Выбери свою профессию\"\n                defaultOption=\"Choose...\"\n                name=\"profession\"\n                options={professionsList}\n                onChange={handleChange}\n                value={data.profession}\n                error={errors.profession}\n            />\n            <RadioField\n                options={[\n                    { name: \"Male\", value: \"male\" },\n                    { name: \"Female\", value: \"female\" },\n                    { name: \"Other\", value: \"other\" }\n                ]}\n                value={data.sex}\n                name=\"sex\"\n                onChange={handleChange}\n                label=\"Выберите ваш пол\"\n            />\n            <MultiSelectField\n                options={qualitiesList}\n                onChange={handleChange}\n                name=\"qualities\"\n                label=\"Выберите ваши качесвта\"\n            />\n            <CheckBoxField\n                value={data.licence}\n                onChange={handleChange}\n                name=\"licence\"\n                error={errors.licence}\n            >\n                Подтвердить <a>лицензионное соглашение</a>\n            </CheckBoxField>\n            <button\n                type=\"submit\"\n                disabled={!isValid}\n                className=\"btn btn-primary w-100 mx-auto\"\n            >\n                Submit\n            </button>\n        </form>\n    );\n};\n\nexport default RegisterForm;\n","import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport LoginForm from \"../components/ui/loginForm\";\r\nimport RegisterForm from \"../components/ui/registerForm\";\r\n\r\nconst Login = () => {\r\n    const { type } = useParams();\r\n    const [formType, setFormType] = useState(\r\n        type === \"register\" ? type : \"login\"\r\n    );\r\n    const toggleFormType = (params) => {\r\n        setFormType((prevState) =>\r\n            prevState === \"register\" ? \"login\" : \"register\"\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\r\n                    {formType === \"register\" ? (\r\n                        <>\r\n                            <h3 className=\"mb-4\">Register</h3>\r\n                            <RegisterForm />\r\n                            <p>\r\n                                Already have account?{\" \"}\r\n                                <a role=\"button\" onClick={toggleFormType}>\r\n                                    {\" \"}\r\n                                    Sign In\r\n                                </a>\r\n                            </p>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <h3 className=\"mb-4\">Login</h3>\r\n                            <LoginForm />\r\n                            <p>\r\n                                Dont have account?{\" \"}\r\n                                <a role=\"button\" onClick={toggleFormType}>\r\n                                    {\" \"}\r\n                                    Sign Up\r\n                                </a>\r\n                            </p>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Login;\r\n","import { useEffect, useState } from \"react\";\r\nimport professions from \"../mockData/professions.json\";\r\nimport qualities from \"../mockData/qualities.json\";\r\nimport users from \"../mockData/users.json\";\r\nimport httpService from \"../services/http.service\";\r\n\r\nconst useMockData = () => {\r\n    const statusConsts = {\r\n        idle: \"Not Started\",\r\n        pending: \"In Process\",\r\n        successed: \"Ready\",\r\n        error: \"Error occured\"\r\n    };\r\n    const [error, setError] = useState(null);\r\n    const [status, setStatus] = useState(statusConsts.idle);\r\n    const [progress, setProgress] = useState(0);\r\n    const [count, setCount] = useState(0);\r\n    const summuryCount = professions.length + qualities.length + users.length;\r\n    const incrementCount = () => {\r\n        setCount((prevState) => prevState + 1);\r\n    };\r\n    const updateProgress = () => {\r\n        if (count !== 0 && status === statusConsts.idle) {\r\n            setStatus(statusConsts.pending);\r\n        }\r\n        const newProgress = Math.floor((count / summuryCount) * 100);\r\n        if (progress < newProgress) {\r\n            setProgress(() => newProgress);\r\n        }\r\n        if (newProgress === 100) {\r\n            setStatus(statusConsts.successed);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        updateProgress();\r\n    }, [count]);\r\n    async function initialize() {\r\n        try {\r\n            for (const prof of professions) {\r\n                await httpService.put(\"profession/\" + prof._id, prof);\r\n                incrementCount();\r\n            }\r\n            for (const user of users) {\r\n                await httpService.put(\"user/\" + user._id, user);\r\n                incrementCount();\r\n            }\r\n            for (const qual of qualities) {\r\n                await httpService.put(\"quality/\" + qual._id, qual);\r\n                incrementCount();\r\n            }\r\n        } catch (error) {\r\n            setError(error);\r\n            setStatus(statusConsts.error);\r\n        }\r\n    }\r\n\r\n    return { error, initialize, progress, status };\r\n};\r\n\r\nexport default useMockData;\r\n","import React from \"react\";\r\nimport useMockData from \"../utils/mockData\";\r\n\r\nconst Main = () => {\r\n    const { error, initialize, progress, status } = useMockData();\r\n    const handleClick = () => {\r\n        initialize();\r\n    };\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h1> Main Page</h1>\r\n            <h3>Инициализация данных в FireBase</h3>\r\n            <ul>\r\n                <li>Status:{status}</li>\r\n                <li>Progress: {progress}%</li>\r\n                {error && <li>error: {error}</li>}\r\n            </ul>\r\n            <button className=\"btn btn-primary\" onClick={handleClick}>\r\n                {\" \"}\r\n                Инициализировать\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getCurrentUserData } from \"../../store/users\";\r\nconst NavProfile = () => {\r\n    const currentUser = useSelector(getCurrentUserData());\r\n    const [isOpen, setOpen] = useState(false);\r\n    const toggleMenu = () => {\r\n        setOpen((prevState) => !prevState);\r\n    };\r\n\r\n    if (!currentUser) return \"loading\";\r\n    return (\r\n        <div className=\"dropdown\" onClick={toggleMenu}>\r\n            <div className=\"btn dropdown-toggle d-flex align-items-center\">\r\n                <div className=\"me-2\">{currentUser.name}</div>\r\n                <img\r\n                    src={currentUser.image}\r\n                    alt=\"\"\r\n                    height=\"40\"\r\n                    className=\"img-responsive rounded-circle\"\r\n                />\r\n            </div>\r\n            <div className={\"w-100 dropdown-menu\" + (isOpen ? \" show\" : \"\")}>\r\n                <Link\r\n                    to={`/users/${currentUser._id}`}\r\n                    className=\"dropdown-item\"\r\n                >\r\n                    Profile\r\n                </Link>\r\n                <Link to=\"/logout\" className=\"dropdown-item\">\r\n                    Log Out\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavProfile;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { getIsLoggedIn } from \"../../store/users\";\r\nimport NavProfile from \"./navProfile\";\r\nconst NavBar = () => {\r\n    const isLoggedIn = useSelector(getIsLoggedIn());\r\n    return (\r\n        <nav className=\"navbar bg-light mb-3\">\r\n            <div className=\"container-fluid\">\r\n                <ul className=\"nav\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">\r\n                            Main\r\n                        </Link>\r\n                    </li>\r\n                    {isLoggedIn && (\r\n                        <li className=\"nav-item\">\r\n                            <Link\r\n                                className=\"nav-link \"\r\n                                aria-current=\"page\"\r\n                                to=\"/users\"\r\n                            >\r\n                                Users\r\n                            </Link>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n                <div className=\"d-flex\">\r\n                    {isLoggedIn ? (\r\n                        <NavProfile />\r\n                    ) : (\r\n                        <Link\r\n                            className=\"nav-link \"\r\n                            aria-current=\"page\"\r\n                            to=\"/login\"\r\n                        >\r\n                            Login\r\n                        </Link>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getIsLoggedIn } from \"../../store/users\";\r\nconst ProtectedRoute = ({ component: Component, children, ...rest }) => {\r\n    const isLoggedIn = useSelector(getIsLoggedIn());\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => {\r\n                if (!isLoggedIn) {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: {\r\n                                    from: props.location\r\n                                }\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n                return Component ? <Component {...props} /> : children;\r\n            }}\r\n        />\r\n    );\r\n};\r\nProtectedRoute.propTypes = {\r\n    component: PropTypes.func,\r\n    location: PropTypes.object,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { logOut } from \"../store/users\";\r\nconst LogOut = () => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        console.log(\"logout\");\r\n        dispatch(logOut());\r\n    }, []);\r\n    return <h1>Loading</h1>;\r\n};\r\n\r\nexport default LogOut;\r\n","import { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getIsLoggedIn,\r\n    getUsersLoadingStatus,\r\n    loadUsersList\r\n} from \"../../../store/users\";\r\nimport { loadQualitiesList } from \"../../../store/qualities\";\r\nimport { loadProfessionsList } from \"../../../store/professions\";\r\n\r\nconst AppLoader = ({ children }) => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector(getIsLoggedIn());\r\n    const usersStatusLoading = useSelector(getUsersLoadingStatus());\r\n    useEffect(() => {\r\n        dispatch(loadQualitiesList());\r\n        dispatch(loadProfessionsList());\r\n        if (isLoggedIn) {\r\n            dispatch(loadUsersList());\r\n        }\r\n    }, [isLoggedIn]);\r\n    if (usersStatusLoading) return \"loading\";\r\n    return children;\r\n};\r\n\r\nAppLoader.propTypes = {\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n};\r\nexport default AppLoader;\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport Users from \"./layouts/users\";\r\nimport Login from \"./layouts/login\";\r\nimport Main from \"./layouts/main\";\r\nimport NavBar from \"./components/ui/navBar\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport ProtectedRoute from \"./components/common/protectedRoute\";\r\nimport LogOut from \"./layouts/logOut\";\r\nimport AppLoader from \"./components/ui/hoc/appLoader\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <AppLoader>\r\n                <NavBar />\r\n                <Switch>\r\n                    <ProtectedRoute\r\n                        path=\"/users/:userId?/:edit?\"\r\n                        component={Users}\r\n                    />\r\n                    <Route path=\"/login/:type?\" component={Login} />\r\n                    <Route path=\"/logout\" component={LogOut} />\r\n                    <Route path=\"/\" exact component={Main} />\r\n                    <Redirect to=\"/\" />\r\n                </Switch>\r\n            </AppLoader>\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import commentsReducer from \"./comments\";\r\nimport professionsReducer from \"./professions\";\r\nimport qualitiesReducer from \"./qualities\";\r\nimport usersReducer from \"./users\";\r\n\r\nconst { combineReducers, configureStore } = require(\"@reduxjs/toolkit\");\r\n\r\nconst rootReducer = combineReducers({\r\n    qualities: qualitiesReducer,\r\n    professions: professionsReducer,\r\n    users: usersReducer,\r\n    comments: commentsReducer\r\n});\r\n\r\nexport function createStore() {\r\n    return configureStore({\r\n        reducer: rootReducer\r\n    });\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./app/App\";\r\nimport { Router } from \"react-router-dom\";\r\nimport { createStore } from \"./app/store/createStore\";\r\nimport { Provider } from \"react-redux\";\r\nimport history from \"./app/utils/history\";\r\n\r\nconst store = createStore();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <Router history={history}>\r\n                <App />\r\n            </Router>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}